version: '3.8'

services:
  db:
    container_name: ${POSTGRES_CONTAINER_NAME}
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_MULTIPLE_DATABASES=${STORAGE_DB},${FORUM_DB},${AUTH_DB},${NOTIFICATION_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ./postgres-data8:/var/lib/postgresql/data8
      - ./create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    command: -p ${POSTGRES_PORT}
    networks:
      - default

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s
    networks:
      - default

  broker:
    image: confluentinc/cp-kafka:latest
    hostname: ${KAFKA_HOST}
    container_name: ${KAFKA_HOST}
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
      - '${KAFKA_PORT}:${KAFKA_PORT}'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - default

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    hostname: kafka-ui
    depends_on:
      - broker
    ports:
      - '8090:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - default

  redis:
    container_name: ${REDIS_CONTAINER_NAME}
    image: redis:latest
    restart: always
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis:/var/lib/redis/data
    networks:
      - default

  storage:
    image: ${STORAGE_APP_NAME}
    container_name: ${STORAGE_APP_NAME}
    build:
      context: storage
      dockerfile: ./Dockerfile
    depends_on:
      - ${POSTGRES_CONTAINER_NAME}
    ports:
      - '${STORAGE_APP_PORT}:${STORAGE_APP_PORT}'
    environment:
      - POSTGRES_HOST=${POSTGRES_CONTAINER_NAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${STORAGE_DB}
      - APP_PORT=${STORAGE_APP_PORT}
    networks:
      - default

  gateway:
    image: gateway
    container_name: gateway
    build:
      context: gateway
      dockerfile: ./Dockerfile
    depends_on:
      - ${STORAGE_APP_NAME}
      - ${FORUM_APP_NAME}
      - ${NOTIFICATION_APP_NAME}
    ports:
      - '${GATEWAY_APP_PORT}:${GATEWAY_APP_PORT}'
    environment:
      - STORAGE_URL=http://storage:${STORAGE_APP_PORT}
      - APP_PORT=${GATEWAY_APP_PORT}
      - STORAGE_APP_HOST=${STORAGE_APP_NAME}
      - FORUM_APP_PORT=${FORUM_APP_PORT}
      - FORUM_APP_HOST=${FORUM_APP_NAME}
      - AUTH_APP_HOST=${AUTH_APP_NAME}
      - AUTH_APP_PORT=${AUTH_APP_PORT}
    networks:
      - default

  forum:
    image: ${FORUM_APP_NAME}
    container_name: ${FORUM_APP_NAME}
    build:
      context: forum
      dockerfile: ./Dockerfile
    depends_on:
      - ${POSTGRES_CONTAINER_NAME}
      - ${KAFKA_HOST}
    ports:
      - '${FORUM_APP_PORT}:${FORUM_APP_PORT}'
    environment:
      - POSTGRES_HOST=${POSTGRES_CONTAINER_NAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${FORUM_DB}
      - STORAGE_SERVICE_URL=${STORAGE_SERVICE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - APP_PORT=${FORUM_APP_PORT}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - default

  notification:
    image: ${NOTIFICATION_APP_NAME}
    container_name: ${NOTIFICATION_APP_NAME}
    build:
      context: notification
      dockerfile: ./Dockerfile
    depends_on:
      - ${POSTGRES_CONTAINER_NAME}
      - ${KAFKA_HOST}
    ports:
      - '${NOTIFICATION_APP_PORT}:${NOTIFICATION_APP_PORT}'
    environment:
      - POSTGRES_HOST=${POSTGRES_CONTAINER_NAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${NOTIFICATION_DB}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - APP_PORT=${NOTIFICATION_APP_PORT}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
    networks:
      - default

  auth:
    image: ${AUTH_APP_NAME}
    container_name: ${AUTH_APP_NAME}
    build:
      context: auth
      dockerfile: ./Dockerfile
    depends_on:
      - ${POSTGRES_CONTAINER_NAME}
      - ${KAFKA_HOST}
    ports:
      - '${AUTH_APP_PORT}:${AUTH_APP_PORT}'
    environment:
      - POSTGRES_HOST=${POSTGRES_CONTAINER_NAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${AUTH_DB}
      - REDIS_HOST=${REDIS_CONTAINER_NAME}
      - REDIS_PORT=${REDIS_PORT}
      - APP_PORT=${AUTH_APP_PORT}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - default

networks:
  default:
    name: ${NETWORK_NAME}
    driver: bridge

volumes:
  db:
    driver: local
  redis:
    driver: local
